--------------------------------------------------------------------------------
Profile data file 'callgrind_file' (creator: callgrind-3.19.0)
--------------------------------------------------------------------------------
I1 cache: 
D1 cache: 
LL cache: 
Timerange: Basic block 0 - 1279122206
Trigger: Program termination
Profiled target:  ./program (PID 13, part 1)
Events recorded:  Ir
Events shown:     Ir
Event sort order: Ir
Thresholds:       99
Include dirs:     
User annotated:   
Auto-annotation:  on

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
6,098,787,078 (100.0%)  PROGRAM TOTALS

--------------------------------------------------------------------------------
Ir                      file:function
--------------------------------------------------------------------------------
5,298,564,472 (86.88%)  main.c:fibonacci'2 [/usr/src/app/program]
  700,070,017 (11.48%)  main.c:waste_time [/usr/src/app/program]
  100,000,183 ( 1.64%)  main.c:is_prime [/usr/src/app/program]

--------------------------------------------------------------------------------
-- Auto-annotated source: main.c
--------------------------------------------------------------------------------
Ir                     

            .           #include <stdio.h>
            .           
            .           // Recursive Fibonacci function (inefficient for large n)
1,655,801,405 (27.15%)  int fibonacci(int n) {
  993,480,844 (16.29%)      if (n <= 1) return n;
1,655,801,400 (27.15%)      else return fibonacci(n - 1) + fibonacci(n - 2);
5,298,564,472 (86.88%)  => main.c:fibonacci'2 (2x)
  993,480,843 (16.29%)  }
            .           
            .           // Inefficient prime checking function
            3 ( 0.00%)  int is_prime(int n) {
            2 ( 0.00%)      if (n <= 1) return 0;
            .               int i;
   40,000,073 ( 0.66%)      for (i = 2; i < n; i++) { // Checks all numbers up to n-1
   60,000,102 ( 0.98%)          if (n % i == 0) return 0;
            .               }
            1 ( 0.00%)      return 1;
            2 ( 0.00%)  }
            .           
            .           // Slow multiplication via repeated addition
            4 ( 0.00%)  int slow_multiply(int a, int b) {
            1 ( 0.00%)      int result = 0, i;
       27,161 ( 0.00%)      for (i = 0; i < b; i++) {
       13,578 ( 0.00%)          result += a;
            .               }
            1 ( 0.00%)      return result;
            2 ( 0.00%)  }
            .           
            .           // Function to waste time with nested loops
            3 ( 0.00%)  void waste_time() {
            .               int i, j;
            1 ( 0.00%)      long sum = 0;
       30,004 ( 0.00%)      for (i = 0; i < 10000; i++) {
  300,040,000 ( 4.92%)          for (j = 0; j < 10000; j++) {
  400,000,000 ( 6.56%)              sum += i * j;
            .                   }
            .               }
            6 ( 0.00%)      printf("Sum in waste_time: %ld\n", sum);
          835 ( 0.00%)  => ./stdio-common/./stdio-common/printf.c:printf (1x)
            3 ( 0.00%)  }
            .           
            3 ( 0.00%)  int main() {
            .               // Calculate a large Fibonacci number
            1 ( 0.00%)      int n = 40; // Adjust n for longer computation times
            4 ( 0.00%)      int fib_n = fibonacci(n);
5,298,564,492 (86.88%)  => main.c:fibonacci (1x)
           11 ( 0.00%)      printf("Fibonacci(%d) = %d\n", n, fib_n);
        3,091 ( 0.00%)  => ./stdio-common/./stdio-common/printf.c:printf (1x)
          635 ( 0.00%)  => ./elf/../sysdeps/x86_64/dl-trampoline.h:_dl_runtime_resolve_xsave (1x)
            .           
            .               // Check if a large number is prime
            1 ( 0.00%)      int num = 10000019;
            5 ( 0.00%)      if (is_prime(num)) {
  100,000,183 ( 1.64%)  => main.c:is_prime (1x)
            7 ( 0.00%)          printf("%d is prime\n", num);
          654 ( 0.00%)  => ./stdio-common/./stdio-common/printf.c:printf (1x)
            .               } else {
            .                   printf("%d is not prime\n", num);
            .               }
            .           
            .               // Perform slow multiplication
            4 ( 0.00%)      int result = slow_multiply(12345, 6789);
       40,747 ( 0.00%)  => main.c:slow_multiply (1x)
            6 ( 0.00%)      printf("Result of slow multiplication: %d\n", result);
          710 ( 0.00%)  => ./stdio-common/./stdio-common/printf.c:printf (1x)
            .           
            .               // Waste time with nested loops
            2 ( 0.00%)      waste_time();
  700,070,852 (11.48%)  => main.c:waste_time (1x)
            .           
            1 ( 0.00%)      return 0;
            2 ( 0.00%)  }

--------------------------------------------------------------------------------
Ir                     
--------------------------------------------------------------------------------
6,098,675,486 (100.0%)  events annotated

